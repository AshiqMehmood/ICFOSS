/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.icfoss.gui;
import java.io.IOException;
import javax.swing.text.BadLocationException;
import java.io.PrintStream;
import com.fazecast.jSerialComm.SerialPort;
import javax.swing.Timer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;


/**
 *
 * @author ashiq
 */


public class MainUI extends javax.swing.JFrame {

    static SerialComm arduino;
    static PortSetup port = new PortSetup();
    private PrintStream standardOut;
   // static SerialPort port1;
    static String selected;
    static String initializer = "!#!";
    static String command = "*#*";
    static String clearRom = "ro" , updateRom= "ur", resetDevice= "re";
    static String sipPuff = "sp", forceCalib = "fc", varDirectEntry = "va", getRomValue = "rv";
    static String aux1 = "a1", aux2 = "a2", aux3 = "a3";
    static String leftClick = "a", rightClick = "b", backSpace ="c";
    static String deadZone = "f", pSensitivity = "p", hardCodeSpeed = "h", speedDelay ="s", speedShifter ="d";
    static String keyboardMode ="m1", mouse ="m0" , arrowKeyDelay = "a" , arrowKeySensitivity= "k";
    static String testData = "te", endReading = "end";
    static String sipHold = "pu", scroll = "0", keyboardPress = "1" ;
    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        //comboPorts();
        port.refreshPort(portList);
        printStream();
        setSliders();
       //port.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 0, 0);
        menu_endProcess.setEnabled(false);
        btnDisconnect.setEnabled(false);
        console.setEnabled(false);
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jOptionPane1 = new javax.swing.JOptionPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btn_SipPuff = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        slr_pSensitivity = new javax.swing.JSlider();
        btn_SetSensitivity = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        slr_speedShifter = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        btn_SetSpeedShifter = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        slr_hardCodeSpeed = new javax.swing.JSlider();
        btn_SetHardSpeed = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        slr_speedDelay = new javax.swing.JSlider();
        btn_SetSpeedDelay = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        slr_arrowSensitivity = new javax.swing.JSlider();
        slr_arrowKeyDelay = new javax.swing.JSlider();
        btn_SetArrowSensitivity = new javax.swing.JButton();
        btn_SetArrowKeyDelay = new javax.swing.JButton();
        combo_selectMode = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        radio_BackP1 = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        radio_LeftP2 = new javax.swing.JRadioButton();
        radio_BackP2 = new javax.swing.JRadioButton();
        radio_LeftP1 = new javax.swing.JRadioButton();
        radio_RightP1 = new javax.swing.JRadioButton();
        radio_RightP2 = new javax.swing.JRadioButton();
        radio_LeftP3 = new javax.swing.JRadioButton();
        radio_RightP3 = new javax.swing.JRadioButton();
        radio_BackP3 = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        radio_scroll = new javax.swing.JRadioButton();
        radio_keyboardPress = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        btn_calibForceSensors = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        slr_deadZone = new javax.swing.JSlider();
        btn_SetdeadZone = new javax.swing.JButton();
        portList = new javax.swing.JComboBox<>();
        btnConnect = new javax.swing.JButton();
        btnDisconnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        radio_clear = new javax.swing.JRadioButton();
        radio_update = new javax.swing.JRadioButton();
        radio_reset = new javax.swing.JRadioButton();
        btn_StartConfig = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        testLabel = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        serialMonitor = new javax.swing.JMenu();
        displayRomData = new javax.swing.JMenuItem();
        testNewData = new javax.swing.JMenuItem();
        menu_endProcess = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FlipMouse Configuration Gui");
        setMinimumSize(new java.awt.Dimension(590, 500));
        setPreferredSize(new java.awt.Dimension(650, 500));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_SipPuff.setText("Start ");
        btn_SipPuff.setToolTipText("user must puff maximum into the tube for 5 seconds and then sip maximum for 5 seconds");
        btn_SipPuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SipPuffActionPerformed(evt);
            }
        });
        jPanel1.add(btn_SipPuff, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 130, 80, 30));

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(29, 90, 110));
        jLabel4.setText("Click start to begin System calibration");
        jLabel4.setToolTipText("user must puff maximum into the tube for 5 seconds and then sip maximum for 5 seconds to set Sensitivity automatically");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 320, 40));

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setText("Pressure Sensitivity");
        jLabel3.setToolTipText("Adjusts the Sensitivity of pressur sensor");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 160, 20));

        slr_pSensitivity.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        slr_pSensitivity.setForeground(new java.awt.Color(46, 137, 16));
        slr_pSensitivity.setMajorTickSpacing(2);
        slr_pSensitivity.setMaximum(9);
        slr_pSensitivity.setMinorTickSpacing(1);
        slr_pSensitivity.setPaintLabels(true);
        slr_pSensitivity.setPaintTicks(true);
        slr_pSensitivity.setToolTipText("adjust value from 0 to 9");
        slr_pSensitivity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slr_pSensitivityStateChanged(evt);
            }
        });
        jPanel1.add(slr_pSensitivity, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 10, 210, 70));

        btn_SetSensitivity.setText("Set Value");
        btn_SetSensitivity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SetSensitivityActionPerformed(evt);
            }
        });
        jPanel1.add(btn_SetSensitivity, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 30, -1, -1));

        jLabel14.setFont(new java.awt.Font("Cantarell", 0, 15)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(228, 9, 40));
        jLabel14.setText("(PS: use only if above setting fails)");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 240, -1));

        jTabbedPane1.addTab("Sip & Puff", jPanel1);

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        slr_speedShifter.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        slr_speedShifter.setForeground(new java.awt.Color(223, 98, 59));
        slr_speedShifter.setMajorTickSpacing(2);
        slr_speedShifter.setMaximum(9);
        slr_speedShifter.setMinorTickSpacing(1);
        slr_speedShifter.setPaintLabels(true);
        slr_speedShifter.setPaintTicks(true);
        slr_speedShifter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slr_speedShifterStateChanged(evt);
            }
        });
        jPanel2.add(slr_speedShifter, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 120, 210, 70));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel1.setText("Speed Shifter");
        jLabel1.setToolTipText("controls dynamic increase in speed");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 160, 20));

        btn_SetSpeedShifter.setText("Set Value");
        btn_SetSpeedShifter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SetSpeedShifterActionPerformed(evt);
            }
        });
        jPanel2.add(btn_SetSpeedShifter, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 140, -1, -1));

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel5.setText("HardCode Speed");
        jLabel5.setToolTipText("minimum offset of cursor(min. pixel)");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 160, 20));

        slr_hardCodeSpeed.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        slr_hardCodeSpeed.setForeground(new java.awt.Color(12, 170, 47));
        slr_hardCodeSpeed.setMajorTickSpacing(2);
        slr_hardCodeSpeed.setMaximum(9);
        slr_hardCodeSpeed.setMinorTickSpacing(1);
        slr_hardCodeSpeed.setPaintLabels(true);
        slr_hardCodeSpeed.setPaintTicks(true);
        slr_hardCodeSpeed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slr_hardCodeSpeedStateChanged(evt);
            }
        });
        jPanel2.add(slr_hardCodeSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 0, 210, 70));

        btn_SetHardSpeed.setText("Set Value");
        btn_SetHardSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SetHardSpeedActionPerformed(evt);
            }
        });
        jPanel2.add(btn_SetHardSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel6.setText("Speed Delay");
        jLabel6.setToolTipText("speed with which cursor moves");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 160, 20));

        slr_speedDelay.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        slr_speedDelay.setForeground(new java.awt.Color(63, 156, 214));
        slr_speedDelay.setMajorTickSpacing(2);
        slr_speedDelay.setMaximum(9);
        slr_speedDelay.setMinorTickSpacing(1);
        slr_speedDelay.setPaintLabels(true);
        slr_speedDelay.setPaintTicks(true);
        slr_speedDelay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slr_speedDelayStateChanged(evt);
            }
        });
        jPanel2.add(slr_speedDelay, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 210, 70));

        btn_SetSpeedDelay.setText("Set Value");
        btn_SetSpeedDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SetSpeedDelayActionPerformed(evt);
            }
        });
        jPanel2.add(btn_SetSpeedDelay, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, -1, -1));

        jTabbedPane1.addTab("Mouse Settings", jPanel2);

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel7.setText("Arrow Sensitivity");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 160, 30));

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel8.setText("Select Working Mode");
        jLabel8.setToolTipText("In keyboard mode, movement of mouthpiece to each direction activates arrowkeys up,down,left & right resp.\nsip will be 'Enter', puff will be 'Esc' \n");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 180, 20));

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel9.setText("Arrow Key Delay");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 160, 30));

        slr_arrowSensitivity.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        slr_arrowSensitivity.setForeground(new java.awt.Color(191, 87, 219));
        slr_arrowSensitivity.setMajorTickSpacing(2);
        slr_arrowSensitivity.setMaximum(9);
        slr_arrowSensitivity.setMinorTickSpacing(1);
        slr_arrowSensitivity.setPaintLabels(true);
        slr_arrowSensitivity.setPaintTicks(true);
        slr_arrowSensitivity.setToolTipText("3 is set for average value");
        slr_arrowSensitivity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slr_arrowSensitivityStateChanged(evt);
            }
        });
        jPanel3.add(slr_arrowSensitivity, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 200, 70));

        slr_arrowKeyDelay.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        slr_arrowKeyDelay.setForeground(new java.awt.Color(198, 145, 28));
        slr_arrowKeyDelay.setMajorTickSpacing(2);
        slr_arrowKeyDelay.setMaximum(9);
        slr_arrowKeyDelay.setMinorTickSpacing(1);
        slr_arrowKeyDelay.setPaintLabels(true);
        slr_arrowKeyDelay.setPaintTicks(true);
        slr_arrowKeyDelay.setToolTipText("5 is set for average value");
        slr_arrowKeyDelay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slr_arrowKeyDelayStateChanged(evt);
            }
        });
        jPanel3.add(slr_arrowKeyDelay, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 40, 200, 70));

        btn_SetArrowSensitivity.setText("Set Value");
        btn_SetArrowSensitivity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SetArrowSensitivityActionPerformed(evt);
            }
        });
        jPanel3.add(btn_SetArrowSensitivity, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 130, -1, -1));

        btn_SetArrowKeyDelay.setText("Set Value");
        btn_SetArrowKeyDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SetArrowKeyDelayActionPerformed(evt);
            }
        });
        jPanel3.add(btn_SetArrowKeyDelay, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 60, -1, -1));

        combo_selectMode.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        combo_selectMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<select>", "Mouse", "Keyboard" }));
        combo_selectMode.setToolTipText("");
        combo_selectMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_selectModeActionPerformed(evt);
            }
        });
        jPanel3.add(combo_selectMode, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, 150, 30));

        jTabbedPane1.addTab("Keyboard Settings", jPanel3);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(35, 199, 65));
        jLabel10.setText("PORT 3");
        jLabel10.setToolTipText("choose any one function to perf");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 140, 70, 20));

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(52, 172, 212));
        jLabel11.setText("PORT 1");
        jLabel11.setToolTipText("choose any one function to perform using this port");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 70, 20));

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(217, 59, 63));
        jLabel12.setText("PORT 2");
        jLabel12.setToolTipText("choose any one function to perf");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 70, 20));

        buttonGroup2.add(radio_BackP1);
        radio_BackP1.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_BackP1.setText("Backspace");
        radio_BackP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_BackP1ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_BackP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, -1, 30));
        jPanel4.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 610, -1));
        jPanel4.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 610, 10));

        buttonGroup3.add(radio_LeftP2);
        radio_LeftP2.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_LeftP2.setText("Left Click");
        radio_LeftP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_LeftP2ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_LeftP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, -1, 30));

        buttonGroup3.add(radio_BackP2);
        radio_BackP2.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_BackP2.setText("Backspace");
        radio_BackP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_BackP2ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_BackP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 70, -1, 30));

        buttonGroup2.add(radio_LeftP1);
        radio_LeftP1.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_LeftP1.setText("Left Click");
        radio_LeftP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_LeftP1ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_LeftP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, 30));

        buttonGroup2.add(radio_RightP1);
        radio_RightP1.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_RightP1.setText("Right Click");
        radio_RightP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_RightP1ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_RightP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, -1, 30));

        buttonGroup3.add(radio_RightP2);
        radio_RightP2.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_RightP2.setText("Right Click");
        radio_RightP2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_RightP2ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_RightP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 70, -1, 30));

        buttonGroup4.add(radio_LeftP3);
        radio_LeftP3.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_LeftP3.setText("Left Click");
        radio_LeftP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_LeftP3ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_LeftP3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, -1, -1));

        buttonGroup4.add(radio_RightP3);
        radio_RightP3.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_RightP3.setText("Right Click");
        radio_RightP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_RightP3ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_RightP3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, -1, -1));

        buttonGroup4.add(radio_BackP3);
        radio_BackP3.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_BackP3.setText("Backspace");
        radio_BackP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_BackP3ActionPerformed(evt);
            }
        });
        jPanel4.add(radio_BackP3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, -1, -1));

        jTabbedPane1.addTab("Aux  Port", jPanel4);

        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(241, 41, 36));
        jLabel13.setText("Sip Hold ");
        jLabel13.setToolTipText("choose a function to perform when you hold your sip for few seconds");
        jPanel5.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 100, 30));

        buttonGroup5.add(radio_scroll);
        radio_scroll.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_scroll.setText("Scroll");
        radio_scroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_scrollActionPerformed(evt);
            }
        });
        jPanel5.add(radio_scroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 110, -1));

        buttonGroup5.add(radio_keyboardPress);
        radio_keyboardPress.setFont(new java.awt.Font("DejaVu Serif", 1, 12)); // NOI18N
        radio_keyboardPress.setText("Keyboard Press");
        radio_keyboardPress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_keyboardPressActionPerformed(evt);
            }
        });
        jPanel5.add(radio_keyboardPress, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, -1, -1));
        jPanel5.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 320, 10));

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel5.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 0, 10, 90));

        btn_calibForceSensors.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        btn_calibForceSensors.setForeground(new java.awt.Color(111, 20, 113));
        btn_calibForceSensors.setText("Calibrate Force Sensors");
        btn_calibForceSensors.setToolTipText("click to stop automatic motion of cursor on screen");
        btn_calibForceSensors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calibForceSensorsActionPerformed(evt);
            }
        });
        jPanel5.add(btn_calibForceSensors, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, 220, 40));

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setText("DeadZone");
        jLabel2.setToolTipText("Threshold value given to avoid random cursor movements");
        jPanel5.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 120, 100, 20));

        slr_deadZone.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        slr_deadZone.setForeground(new java.awt.Color(45, 149, 183));
        slr_deadZone.setMajorTickSpacing(2);
        slr_deadZone.setMaximum(9);
        slr_deadZone.setMinorTickSpacing(1);
        slr_deadZone.setPaintLabels(true);
        slr_deadZone.setPaintTicks(true);
        slr_deadZone.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slr_deadZoneStateChanged(evt);
            }
        });
        jPanel5.add(slr_deadZone, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 90, 210, 80));

        btn_SetdeadZone.setText("Set Value");
        btn_SetdeadZone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SetdeadZoneActionPerformed(evt);
            }
        });
        jPanel5.add(btn_SetdeadZone, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 110, -1, -1));

        jTabbedPane1.addTab("Other settings", jPanel5);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 690, 230));

        portList.setForeground(new java.awt.Color(111, 176, 208));
        portList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        portList.setToolTipText("select port and click on \"Connect\"");
        getContentPane().add(portList, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 160, 30));

        btnConnect.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnConnect.setForeground(new java.awt.Color(62, 159, 35));
        btnConnect.setText("Connect");
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        getContentPane().add(btnConnect, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 20, -1, -1));

        btnDisconnect.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        btnDisconnect.setForeground(new java.awt.Color(226, 28, 20));
        btnDisconnect.setText("Disconnect");
        btnDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisconnectActionPerformed(evt);
            }
        });
        getContentPane().add(btnDisconnect, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        jScrollPane1.setHorizontalScrollBar(jScrollPane1.getHorizontalScrollBar());

        console.setEditable(false);
        console.setColumns(100);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 470, 120));

        buttonGroup1.add(radio_clear);
        radio_clear.setText("Clear Memory");
        radio_clear.setToolTipText("Clearing memory will erase all previous stored data");
        radio_clear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radio_clearMouseClicked(evt);
            }
        });
        radio_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_clearActionPerformed(evt);
            }
        });
        getContentPane().add(radio_clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 320, -1, -1));

        buttonGroup1.add(radio_update);
        radio_update.setText("Update Device");
        radio_update.setToolTipText("please click on update only after setting all the values !");
        radio_update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radio_updateMouseClicked(evt);
            }
        });
        radio_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_updateActionPerformed(evt);
            }
        });
        getContentPane().add(radio_update, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 290, -1, -1));

        buttonGroup1.add(radio_reset);
        radio_reset.setText("Reset Device");
        radio_reset.setToolTipText("Restart your device ");
        radio_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_resetActionPerformed(evt);
            }
        });
        getContentPane().add(radio_reset, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 350, -1, -1));

        btn_StartConfig.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        btn_StartConfig.setForeground(new java.awt.Color(2, 101, 15));
        btn_StartConfig.setText("Start Configuration mode");
        btn_StartConfig.setToolTipText("click to begin the configuration process");
        btn_StartConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_StartConfigActionPerformed(evt);
            }
        });
        getContentPane().add(btn_StartConfig, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, 220, -1));

        btn_refresh.setIcon(new javax.swing.ImageIcon("/home/ashiq/Pictures/image.jpg")); // NOI18N
        btn_refresh.setToolTipText("click refresh if port not available");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });
        getContentPane().add(btn_refresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 40, 30));

        testLabel.setEditable(false);
        testLabel.setBackground(new java.awt.Color(31, 31, 13));
        testLabel.setFont(new java.awt.Font("URW Gothic L", 1, 12)); // NOI18N
        testLabel.setForeground(new java.awt.Color(248, 249, 238));
        getContentPane().add(testLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 380, 210, 30));

        jMenu1.setText("File");
        jMenu1.setToolTipText("");
        jMenuBar1.add(jMenu1);

        serialMonitor.setText("View");

        displayRomData.setText("Display current values");
        displayRomData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayRomDataActionPerformed(evt);
            }
        });
        serialMonitor.add(displayRomData);

        testNewData.setText("Test values");
        testNewData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testNewDataActionPerformed(evt);
            }
        });
        serialMonitor.add(testNewData);

        menu_endProcess.setText("End Process");
        menu_endProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_endProcessActionPerformed(evt);
            }
        });
        serialMonitor.add(menu_endProcess);

        jMenuBar1.add(serialMonitor);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_SetArrowSensitivityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SetArrowSensitivityActionPerformed
        sendSliderValue(slr_arrowSensitivity, arrowKeySensitivity);
        print("Arrow key Sensitivity");
    }//GEN-LAST:event_btn_SetArrowSensitivityActionPerformed

    private void btn_SetArrowKeyDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SetArrowKeyDelayActionPerformed
       sendSliderValue(slr_arrowKeyDelay, arrowKeyDelay);
       print("Arrow Key Delay");
    }//GEN-LAST:event_btn_SetArrowKeyDelayActionPerformed

    private void radio_BackP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_BackP1ActionPerformed
       sendAuxPort(aux1, backSpace);
       print("Backspace for port1");
    }//GEN-LAST:event_radio_BackP1ActionPerformed

    private void radio_LeftP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_LeftP2ActionPerformed
       sendAuxPort(aux2, leftClick);
       print("Left Click for port2");
    }//GEN-LAST:event_radio_LeftP2ActionPerformed

    private void radio_BackP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_BackP2ActionPerformed
      sendAuxPort(aux2, backSpace);
      print("Backspace for port2");
    }//GEN-LAST:event_radio_BackP2ActionPerformed

    private void radio_LeftP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_LeftP1ActionPerformed
      sendAuxPort(aux1, leftClick);
      print("Left Click for port1");
    }//GEN-LAST:event_radio_LeftP1ActionPerformed

    private void radio_RightP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_RightP1ActionPerformed
      sendAuxPort(aux1, rightClick);
      print("Right Click for port1");
    }//GEN-LAST:event_radio_RightP1ActionPerformed

    private void radio_RightP2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_RightP2ActionPerformed
       sendAuxPort(aux2, rightClick);
       print("Right Click for port2");
    }//GEN-LAST:event_radio_RightP2ActionPerformed

    private void radio_LeftP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_LeftP3ActionPerformed
      sendAuxPort(aux3, leftClick);
      print("Left Click for port3");
    }//GEN-LAST:event_radio_LeftP3ActionPerformed

    private void radio_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_clearActionPerformed
     arduino.serialWrite(command + clearRom);
     // console.setText(command + clearRom);
    }//GEN-LAST:event_radio_clearActionPerformed

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
 
           arduino = new SerialComm(portList.getSelectedItem().toString(), 9600);
            if(arduino.openConnection())
            {       btnDisconnect.setEnabled(true); 
                    btnConnect.setEnabled(false);
                    console.setEnabled(true);
                    console.setText(">> Port opened successfully  !!       " + "\n");
                    delayedMessage(">> Now you can click on 'Start configuration mode'"  + "\n", 100);
                   // arduino.printLog();
            }
            else
            {       btnDisconnect.setEnabled(false);
                    btnConnect.setEnabled(true);
                    console.setEnabled(false);
                    console.append(">> Failed to open Port...Try Again !!" + "\n");
            }  
    }//GEN-LAST:event_btnConnectActionPerformed

    private void btnDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisconnectActionPerformed
         arduino.closeConnection();
         console.append(">> Port Closed.......\n");
         btnConnect.setEnabled(true);
         btnDisconnect.setEnabled(false);
         
    }//GEN-LAST:event_btnDisconnectActionPerformed

    private void btn_StartConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_StartConfigActionPerformed
     if(btn_StartConfig.getText().equals("Start Configuration mode")){
      arduino.serialWrite(initializer);    
      getValueToLog(2000);
      btn_StartConfig.setText("Stop Configuration");
     }
     else if(btn_StartConfig.getText().equals("Stop Configuration")){
         arduino.serialWrite(initializer);
         btn_StartConfig.setText("Start Configuration mode");
         console.append(">> Configuration stopped...." + "\n");
     }
      
    }//GEN-LAST:event_btn_StartConfigActionPerformed

    private void btn_SipPuffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SipPuffActionPerformed
       arduino.serialWrite(command + "sp");
       sipPuffMessage();  
       
    }//GEN-LAST:event_btn_SipPuffActionPerformed

    private void btn_SetSensitivityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SetSensitivityActionPerformed
       sendSliderValue(slr_pSensitivity, pSensitivity);
       // arduino.serialWrite(command + "vap" + Integer.toString(slr_pSensitivity.getValue()));
       print("Pressure Sensitivity");
    }//GEN-LAST:event_btn_SetSensitivityActionPerformed

    private void btn_SetdeadZoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SetdeadZoneActionPerformed
      sendSliderValue(slr_deadZone, deadZone );
      print("Dead Zone");
     
    }//GEN-LAST:event_btn_SetdeadZoneActionPerformed

    private void btn_SetHardSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SetHardSpeedActionPerformed
       sendSliderValue(slr_hardCodeSpeed, hardCodeSpeed);
       print("Hardcode Speed");
    }//GEN-LAST:event_btn_SetHardSpeedActionPerformed

    private void btn_SetSpeedDelayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SetSpeedDelayActionPerformed
       sendSliderValue(slr_speedDelay, speedDelay);
       print("Speed Delay");
    }//GEN-LAST:event_btn_SetSpeedDelayActionPerformed

    private void btn_SetSpeedShifterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SetSpeedShifterActionPerformed
       sendSliderValue(slr_speedShifter, speedShifter);
       print("Speed Shifter");
    }//GEN-LAST:event_btn_SetSpeedShifterActionPerformed

    private void radio_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_updateActionPerformed
       arduino.serialWrite(command + updateRom);
       //console.setText(command + updateRom);
       
    }//GEN-LAST:event_radio_updateActionPerformed

    private void radio_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_resetActionPerformed
       arduino.serialWrite(command + resetDevice);
       console.setText(">> Resetting Device...Please wait !!");
    }//GEN-LAST:event_radio_resetActionPerformed

    private void radio_RightP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_RightP3ActionPerformed
       sendAuxPort(aux3, rightClick);
       print("Right Click for port3");
    }//GEN-LAST:event_radio_RightP3ActionPerformed

    private void radio_BackP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_BackP3ActionPerformed
     sendAuxPort(aux3, backSpace);
     print("Backspace for port3");
    }//GEN-LAST:event_radio_BackP3ActionPerformed

    private void radio_scrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_scrollActionPerformed
     setSipHold(scroll);
     print("Scroll mode");
    }//GEN-LAST:event_radio_scrollActionPerformed

    private void radio_keyboardPressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_keyboardPressActionPerformed
     setSipHold(keyboardPress);
     print("Keyboard mode");
    }//GEN-LAST:event_radio_keyboardPressActionPerformed

    private void btn_calibForceSensorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calibForceSensorsActionPerformed
       arduino.serialWrite(command + forceCalib);
        //console.setText(command + forceCalib);
       console.append(">> Force sensors calibrated !\n");
    }//GEN-LAST:event_btn_calibForceSensorsActionPerformed

    private void displayRomDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRomDataActionPerformed
        console.setText(null);
        arduino.serialWrite(command + getRomValue );   
        getValueToLog(2000);  //given some delay to read large data from ROM
    }//GEN-LAST:event_displayRomDataActionPerformed

    private void testNewDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testNewDataActionPerformed
       console.setText(null);
       arduino.serialWrite(command + testData);
       getValueToLog(2000); 
       menu_endProcess.setEnabled(true);
    }//GEN-LAST:event_testNewDataActionPerformed

    private void menu_endProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_endProcessActionPerformed
      arduino.serialWrite(endReading);
      console.setText(">> Stopped...");
    }//GEN-LAST:event_menu_endProcessActionPerformed

    private void radio_clearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radio_clearMouseClicked
            jOptionPane1.showMessageDialog(jTabbedPane1,"Cleared Memory !!","Alert",jOptionPane1.WARNING_MESSAGE);   
    }//GEN-LAST:event_radio_clearMouseClicked

    private void combo_selectModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_selectModeActionPerformed
            if(combo_selectMode.getSelectedItem().toString().equals("Mouse")){
               arduino.serialWrite(command + varDirectEntry + mouse);
               //console.setText(command + varDirectEntry + mouse);
               console.append(">> Mouse is selected\n");
            }
            else if(combo_selectMode.getSelectedItem().toString().equals("Keyboard")){
                 arduino.serialWrite(command + varDirectEntry + keyboardMode);
                 //console.setText(command + varDirectEntry + keyboardMode);
                 console.append(">> Keyboard is selected\n");
            }
            
    }//GEN-LAST:event_combo_selectModeActionPerformed

    private void radio_updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radio_updateMouseClicked
        jOptionPane1.showMessageDialog(jTabbedPane1,"Updated new values to device ! Go to 'View' to cross-check ","Alert",jOptionPane1.WARNING_MESSAGE);   
    }//GEN-LAST:event_radio_updateMouseClicked

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
     port.refreshPort(portList);
    
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void slr_pSensitivityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slr_pSensitivityStateChanged
       if(slr_pSensitivity.getValueIsAdjusting())
           testLabel.setText(Integer.toString(slr_pSensitivity.getValue()));
           
    }//GEN-LAST:event_slr_pSensitivityStateChanged

    private void slr_deadZoneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slr_deadZoneStateChanged
      if(slr_deadZone.getValueIsAdjusting())
          testLabel.setText(Integer.toString(slr_deadZone.getValue()));
    }//GEN-LAST:event_slr_deadZoneStateChanged

    private void slr_hardCodeSpeedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slr_hardCodeSpeedStateChanged
       if(slr_hardCodeSpeed.getValueIsAdjusting())
           testLabel.setText(Integer.toString(slr_hardCodeSpeed.getValue()));
    }//GEN-LAST:event_slr_hardCodeSpeedStateChanged

    private void slr_speedDelayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slr_speedDelayStateChanged
       if(slr_speedDelay.getValueIsAdjusting())
           testLabel.setText(Integer.toString(slr_speedDelay.getValue()));
    }//GEN-LAST:event_slr_speedDelayStateChanged

    private void slr_speedShifterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slr_speedShifterStateChanged
       if(slr_speedShifter.getValueIsAdjusting())
           testLabel.setText(Integer.toString(slr_speedShifter.getValue()));
    }//GEN-LAST:event_slr_speedShifterStateChanged

    private void slr_arrowKeyDelayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slr_arrowKeyDelayStateChanged
        if(slr_arrowKeyDelay.getValueIsAdjusting())
            testLabel.setText(Integer.toString(slr_arrowKeyDelay.getValue()));
    }//GEN-LAST:event_slr_arrowKeyDelayStateChanged

    private void slr_arrowSensitivityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slr_arrowSensitivityStateChanged
      if(slr_arrowSensitivity.getValueIsAdjusting())
          testLabel.setText(Integer.toString(slr_arrowSensitivity.getValue()));
    }//GEN-LAST:event_slr_arrowSensitivityStateChanged

    /**
     * @param args the command line arguments
     */
                                        public static void main(String args[]) {
                                            /* Set the Nimbus look and feel */
                                            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                                            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
                                             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
                                             */
                                            try {
                                                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                                    if ("Nimbus".equals(info.getName())) {
                                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                                        break;
                                                    }
                                                }
                                            } catch (ClassNotFoundException ex) {
                                                java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                                            } catch (InstantiationException ex) {
                                                java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                                            } catch (IllegalAccessException ex) {
                                                java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                                            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                                                java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                                            }
                                            //</editor-fold>

                                            /* Create and display the form */
                                            java.awt.EventQueue.invokeLater(new Runnable() {
                                                public void run() {
                                                    new MainUI().setVisible(true);
                                                    console.setText(">> Baud Rate: '9600'\n");
                                                }
                                            });
                                           
                                           

                                        }
                                        
        private void printStream(){
               PrintStream printStream = new PrintStream(new CustomOutputStream(console));
               System.setOut(printStream);
               System.setErr(printStream);
             }
        
       /** private void comboPorts(){
           
           portList.removeAllItems();
           SerialPort ports[] = SerialPort.getCommPorts();
           for(SerialPort port : ports){
               portList.addItem(port.getSystemPortName());
           }
        }**/
        private void sipPuffMessage(){
          //console.append(">> Sip Puff Calibration" +"\n" + "> Please donot sip or puff into the tube for 5 seconds!" + "\n");    
          //delayedMessage("> Please puff the maximum into the tube for 5 seconds" + "\n", 3000);
         // delayedMessage("> Please sip the maximum into the tube for 5 seconds" + "\n", 6000);
          //delayedMessage(">> Calibration Finished", 8200);
          getValueToLog(1000);
 
        }
        private void delayedMessage(String message, int delay){
             ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    console.append(message);
                   
          }
        };
            Timer t = new Timer(delay, taskPerformer);
            t.setRepeats(false);
            t.start();
            
        }
        private void sendSliderValue(javax.swing.JSlider slider, String code){
            testLabel.setText(Integer.toString(slider.getValue()));
            String getValue = testLabel.getText();
            //console.setText(command + varDirectEntry + code + getValue);
            arduino.serialWrite(command + varDirectEntry + code + getValue);
           
        }
        private void sendAuxPort(String aux, String code){
            arduino.serialWrite(command + aux + code);
            //console.setText(command + aux + code);
        }
        private void setSipHold(String code){
            //console.setText(command + sipHold + code);
            arduino.serialWrite(command + sipHold + code);
        }
        private void getValueToLog(int delay){
          
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                   arduino.printLog();
                   
          }
        };
            Timer t = new Timer(delay, taskPerformer);
            t.setRepeats(false);
            t.start();
           // arduino.printLog();   
        }
        private void print(String string){
            console.append(">> " + string + " is set\n ");
            
        }
        private void setSliders(){
             slr_arrowKeyDelay.setValue(5);
             slr_arrowSensitivity.setValue(3);
             slr_deadZone.setValue(2);
             slr_hardCodeSpeed.setValue(1);
             slr_pSensitivity.setValue(0);
             slr_speedDelay.setValue(0);
             slr_speedShifter.setValue(0);
        }
      
      

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDisconnect;
    private javax.swing.JButton btn_SetArrowKeyDelay;
    private javax.swing.JButton btn_SetArrowSensitivity;
    private javax.swing.JButton btn_SetHardSpeed;
    private javax.swing.JButton btn_SetSensitivity;
    private javax.swing.JButton btn_SetSpeedDelay;
    private javax.swing.JButton btn_SetSpeedShifter;
    private javax.swing.JButton btn_SetdeadZone;
    private javax.swing.JButton btn_SipPuff;
    private javax.swing.JButton btn_StartConfig;
    private javax.swing.JButton btn_calibForceSensors;
    private static javax.swing.JButton btn_refresh;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JComboBox<String> combo_selectMode;
    private static javax.swing.JTextArea console;
    private javax.swing.JMenuItem displayRomData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuItem menu_endProcess;
    private static javax.swing.JComboBox<String> portList;
    private javax.swing.JRadioButton radio_BackP1;
    private javax.swing.JRadioButton radio_BackP2;
    private javax.swing.JRadioButton radio_BackP3;
    private javax.swing.JRadioButton radio_LeftP1;
    private javax.swing.JRadioButton radio_LeftP2;
    private javax.swing.JRadioButton radio_LeftP3;
    private javax.swing.JRadioButton radio_RightP1;
    private javax.swing.JRadioButton radio_RightP2;
    private javax.swing.JRadioButton radio_RightP3;
    private static javax.swing.JRadioButton radio_clear;
    private javax.swing.JRadioButton radio_keyboardPress;
    private static javax.swing.JRadioButton radio_reset;
    private javax.swing.JRadioButton radio_scroll;
    private static javax.swing.JRadioButton radio_update;
    private javax.swing.JMenu serialMonitor;
    private static javax.swing.JSlider slr_arrowKeyDelay;
    private static javax.swing.JSlider slr_arrowSensitivity;
    private static javax.swing.JSlider slr_deadZone;
    private static javax.swing.JSlider slr_hardCodeSpeed;
    private static javax.swing.JSlider slr_pSensitivity;
    private static javax.swing.JSlider slr_speedDelay;
    private static javax.swing.JSlider slr_speedShifter;
    private static javax.swing.JTextField testLabel;
    private javax.swing.JMenuItem testNewData;
    // End of variables declaration//GEN-END:variables
}

